// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package gsd.clafer.ir


trait IType {
  
}


case class IBoolean() extends IType


case class IString(StringSubtype: Option[gsd.clafer.ir.IStringSubtype] = None) extends IType


case class INumeric(NumericSubtype: Option[gsd.clafer.ir.INumericSubtype] = None) extends IType


case class ISet() extends IType


trait IStringSubtype {
  
}


case class ILiteral() extends IStringSubtype


case class ISetString() extends IStringSubtype


trait INumericSubtype {
  
}


case class IInteger() extends INumericSubtype


case class IReal() extends INumericSubtype


case class ISetInteger() extends INumericSubtype


case class ISetReal() extends INumericSubtype


case class IModule(Name: String,
  Declaration: Seq[gsd.clafer.ir.IElement] = Nil)


case class IClafer(IsAbstract: Boolean,
  GroupCard: Option[gsd.clafer.ir.IGroupCard] = None,
  Id: String,
  UniqueId: String,
  Supers: gsd.clafer.ir.ISuper,
  Card: Option[gsd.clafer.ir.IInterval] = None,
  GlobalCard: gsd.clafer.ir.IInterval,
  Declaration: Seq[gsd.clafer.ir.IElement] = Nil) extends IElement


trait IElement {
  
}


case class IConstraint(IsHard: Boolean,
  ParentExp: gsd.clafer.ir.IParentExp) extends IElement


case class ISuper(IsOverlapping: Boolean,
  Super: Seq[gsd.clafer.ir.IParentExp] = Nil)


case class IGroupCard(IsKeyword: Boolean,
  Interval: gsd.clafer.ir.IInterval)


case class Min(IntLiteral: BigInt)


case class IInterval(Min: gsd.clafer.ir.Min,
  Max: gsd.clafer.ir.ExInteger)


case class IParentExp(Type: Option[gsd.clafer.ir.IType] = None,
  ParentId: Option[String] = None,
  Exp: gsd.clafer.ir.IExp)


trait ExInteger {
  
}


case class ExIntegerAst() extends ExInteger


case class ExIntegerNum(IntLiteral: BigInt) extends ExInteger


trait IExp {
  
}


case class IDeclarationParentExp(Quantifier: gsd.clafer.ir.IQuantifier,
  Declaration: Seq[gsd.clafer.ir.IDeclaration] = Nil,
  BodyParentExp: gsd.clafer.ir.IParentExp) extends IExp


case class IFunctionExp(Operation: String,
  Argument: Seq[gsd.clafer.ir.IParentExp] = Nil) extends IExp


case class IIntExp(IntLiteral: BigInt) extends IExp


case class IDoubleExp(DoubleLiteral: Double) extends IExp


case class IStringExp(StringLiteral: String) extends IExp


case class IClaferId(ModuleName: Option[String] = None,
  Id: String,
  IsTop: Boolean) extends IExp


case class IDeclaration(IsDisjunct: Boolean,
  LocalDeclaration: Seq[String] = Nil,
  Body: gsd.clafer.ir.IParentExp)


trait IQuantifier {
  
}


case class INo() extends IQuantifier


case class ILone() extends IQuantifier


case class IOne() extends IQuantifier


case class ISome() extends IQuantifier


case class IAll() extends IQuantifier

