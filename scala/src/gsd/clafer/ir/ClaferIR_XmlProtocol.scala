// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package gsd.clafer.ir
    
/**
usage:
val obj = scalaxb.fromXML[gsd.clafer.ir.Foo](node)
val document = scalaxb.toXML[gsd.clafer.ir.Foo](obj, "foo", gsd.clafer.ir.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://gsd.uwaterloo.ca/clafer",
    Some("cl") -> "http://gsd.uwaterloo.ca/clafer",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val IrITypeFormat: scalaxb.XMLFormat[gsd.clafer.ir.IType] = new DefaultIrITypeFormat {}
  implicit lazy val IrIBooleanFormat: scalaxb.XMLFormat[gsd.clafer.ir.IBoolean] = new DefaultIrIBooleanFormat {}
  implicit lazy val IrIStringFormat: scalaxb.XMLFormat[gsd.clafer.ir.IString] = new DefaultIrIStringFormat {}
  implicit lazy val IrINumericFormat: scalaxb.XMLFormat[gsd.clafer.ir.INumeric] = new DefaultIrINumericFormat {}
  implicit lazy val IrISetFormat: scalaxb.XMLFormat[gsd.clafer.ir.ISet] = new DefaultIrISetFormat {}
  implicit lazy val IrIStringSubtypeFormat: scalaxb.XMLFormat[gsd.clafer.ir.IStringSubtype] = new DefaultIrIStringSubtypeFormat {}
  implicit lazy val IrILiteralFormat: scalaxb.XMLFormat[gsd.clafer.ir.ILiteral] = new DefaultIrILiteralFormat {}
  implicit lazy val IrISetStringFormat: scalaxb.XMLFormat[gsd.clafer.ir.ISetString] = new DefaultIrISetStringFormat {}
  implicit lazy val IrINumericSubtypeFormat: scalaxb.XMLFormat[gsd.clafer.ir.INumericSubtype] = new DefaultIrINumericSubtypeFormat {}
  implicit lazy val IrIIntegerFormat: scalaxb.XMLFormat[gsd.clafer.ir.IInteger] = new DefaultIrIIntegerFormat {}
  implicit lazy val IrIRealFormat: scalaxb.XMLFormat[gsd.clafer.ir.IReal] = new DefaultIrIRealFormat {}
  implicit lazy val IrISetIntegerFormat: scalaxb.XMLFormat[gsd.clafer.ir.ISetInteger] = new DefaultIrISetIntegerFormat {}
  implicit lazy val IrISetRealFormat: scalaxb.XMLFormat[gsd.clafer.ir.ISetReal] = new DefaultIrISetRealFormat {}
  implicit lazy val IrIModuleFormat: scalaxb.XMLFormat[gsd.clafer.ir.IModule] = new DefaultIrIModuleFormat {}
  implicit lazy val IrIClaferFormat: scalaxb.XMLFormat[gsd.clafer.ir.IClafer] = new DefaultIrIClaferFormat {}
  implicit lazy val IrIElementFormat: scalaxb.XMLFormat[gsd.clafer.ir.IElement] = new DefaultIrIElementFormat {}
  implicit lazy val IrIConstraintFormat: scalaxb.XMLFormat[gsd.clafer.ir.IConstraint] = new DefaultIrIConstraintFormat {}
  implicit lazy val IrISuperFormat: scalaxb.XMLFormat[gsd.clafer.ir.ISuper] = new DefaultIrISuperFormat {}
  implicit lazy val IrIGroupCardFormat: scalaxb.XMLFormat[gsd.clafer.ir.IGroupCard] = new DefaultIrIGroupCardFormat {}
  implicit lazy val IrMinFormat: scalaxb.XMLFormat[gsd.clafer.ir.Min] = new DefaultIrMinFormat {}
  implicit lazy val IrIIntervalFormat: scalaxb.XMLFormat[gsd.clafer.ir.IInterval] = new DefaultIrIIntervalFormat {}
  implicit lazy val IrIParentExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IParentExp] = new DefaultIrIParentExpFormat {}
  implicit lazy val IrExIntegerFormat: scalaxb.XMLFormat[gsd.clafer.ir.ExInteger] = new DefaultIrExIntegerFormat {}
  implicit lazy val IrExIntegerAstFormat: scalaxb.XMLFormat[gsd.clafer.ir.ExIntegerAst] = new DefaultIrExIntegerAstFormat {}
  implicit lazy val IrExIntegerNumFormat: scalaxb.XMLFormat[gsd.clafer.ir.ExIntegerNum] = new DefaultIrExIntegerNumFormat {}
  implicit lazy val IrIExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IExp] = new DefaultIrIExpFormat {}
  implicit lazy val IrIDeclarationParentExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IDeclarationParentExp] = new DefaultIrIDeclarationParentExpFormat {}
  implicit lazy val IrIFunctionExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IFunctionExp] = new DefaultIrIFunctionExpFormat {}
  implicit lazy val IrIIntExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IIntExp] = new DefaultIrIIntExpFormat {}
  implicit lazy val IrIDoubleExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IDoubleExp] = new DefaultIrIDoubleExpFormat {}
  implicit lazy val IrIStringExpFormat: scalaxb.XMLFormat[gsd.clafer.ir.IStringExp] = new DefaultIrIStringExpFormat {}
  implicit lazy val IrIClaferIdFormat: scalaxb.XMLFormat[gsd.clafer.ir.IClaferId] = new DefaultIrIClaferIdFormat {}
  implicit lazy val IrIDeclarationFormat: scalaxb.XMLFormat[gsd.clafer.ir.IDeclaration] = new DefaultIrIDeclarationFormat {}
  implicit lazy val IrIQuantifierFormat: scalaxb.XMLFormat[gsd.clafer.ir.IQuantifier] = new DefaultIrIQuantifierFormat {}
  implicit lazy val IrINoFormat: scalaxb.XMLFormat[gsd.clafer.ir.INo] = new DefaultIrINoFormat {}
  implicit lazy val IrILoneFormat: scalaxb.XMLFormat[gsd.clafer.ir.ILone] = new DefaultIrILoneFormat {}
  implicit lazy val IrIOneFormat: scalaxb.XMLFormat[gsd.clafer.ir.IOne] = new DefaultIrIOneFormat {}
  implicit lazy val IrISomeFormat: scalaxb.XMLFormat[gsd.clafer.ir.ISome] = new DefaultIrISomeFormat {}
  implicit lazy val IrIAllFormat: scalaxb.XMLFormat[gsd.clafer.ir.IAll] = new DefaultIrIAllFormat {}

  trait DefaultIrITypeFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IBoolean")) => Right(scalaxb.fromXML[gsd.clafer.ir.IBoolean](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IString")) => Right(scalaxb.fromXML[gsd.clafer.ir.IString](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("INumeric")) => Right(scalaxb.fromXML[gsd.clafer.ir.INumeric](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ISet")) => Right(scalaxb.fromXML[gsd.clafer.ir.ISet](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.IType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.IBoolean => scalaxb.toXML[gsd.clafer.ir.IBoolean](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IString => scalaxb.toXML[gsd.clafer.ir.IString](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.INumeric => scalaxb.toXML[gsd.clafer.ir.INumeric](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ISet => scalaxb.toXML[gsd.clafer.ir.ISet](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrIBooleanFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IBoolean] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.IBoolean] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IBoolean] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.IBoolean())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IBoolean, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrIStringFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IString] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IString] =
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "StringSubtype")) ^^
      { case p1 =>
      gsd.clafer.ir.IString(p1.headOption map { scalaxb.fromXML[gsd.clafer.ir.IStringSubtype](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.StringSubtype map { scalaxb.toXML[gsd.clafer.ir.IStringSubtype](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("StringSubtype"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultIrINumericFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.INumeric] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("INumeric")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.INumeric] =
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "NumericSubtype")) ^^
      { case p1 =>
      gsd.clafer.ir.INumeric(p1.headOption map { scalaxb.fromXML[gsd.clafer.ir.INumericSubtype](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.INumeric, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.NumericSubtype map { scalaxb.toXML[gsd.clafer.ir.INumericSubtype](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("NumericSubtype"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultIrISetFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ISet] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ISet] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ISet] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ISet())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ISet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrIStringSubtypeFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IStringSubtype] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IStringSubtype] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ILiteral")) => Right(scalaxb.fromXML[gsd.clafer.ir.ILiteral](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ISetString")) => Right(scalaxb.fromXML[gsd.clafer.ir.ISetString](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.IStringSubtype, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.ILiteral => scalaxb.toXML[gsd.clafer.ir.ILiteral](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ISetString => scalaxb.toXML[gsd.clafer.ir.ISetString](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrILiteralFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ILiteral] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ILiteral] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ILiteral] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ILiteral())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ILiteral, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrISetStringFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ISetString] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ISetString] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ISetString] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ISetString())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ISetString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrINumericSubtypeFormat extends scalaxb.XMLFormat[gsd.clafer.ir.INumericSubtype] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.INumericSubtype] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IInteger")) => Right(scalaxb.fromXML[gsd.clafer.ir.IInteger](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IReal")) => Right(scalaxb.fromXML[gsd.clafer.ir.IReal](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ISetInteger")) => Right(scalaxb.fromXML[gsd.clafer.ir.ISetInteger](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ISetReal")) => Right(scalaxb.fromXML[gsd.clafer.ir.ISetReal](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.INumericSubtype, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.IInteger => scalaxb.toXML[gsd.clafer.ir.IInteger](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IReal => scalaxb.toXML[gsd.clafer.ir.IReal](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ISetInteger => scalaxb.toXML[gsd.clafer.ir.ISetInteger](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ISetReal => scalaxb.toXML[gsd.clafer.ir.ISetReal](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrIIntegerFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IInteger] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.IInteger] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IInteger] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.IInteger())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IInteger, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrIRealFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IReal] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.IReal] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IReal] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.IReal())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IReal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrISetIntegerFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ISetInteger] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ISetInteger] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ISetInteger] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ISetInteger())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ISetInteger, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrISetRealFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ISetReal] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ISetReal] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ISetReal] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ISetReal())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ISetReal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrIModuleFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IModule] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IModule")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IModule] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Name")) ~ 
      rep(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Declaration")) ^^
      { case p1 ~ p2 =>
      gsd.clafer.ir.IModule(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[gsd.clafer.ir.IElement](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IModule, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://gsd.uwaterloo.ca/clafer"), Some("Name"), __scope, false),
        __obj.Declaration flatMap { scalaxb.toXML[gsd.clafer.ir.IElement](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Declaration"), __scope, false) })

  }

  trait DefaultIrIClaferFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IClafer] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IClafer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IClafer] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IsAbstract")) ~ 
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "GroupCard")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "UniqueId")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Supers")) ~ 
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Card")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "GlobalCard")) ~ 
      rep(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Declaration")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      gsd.clafer.ir.IClafer(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[gsd.clafer.ir.IGroupCard](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[gsd.clafer.ir.ISuper](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[gsd.clafer.ir.IInterval](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[gsd.clafer.ir.IInterval](p7, scalaxb.ElemName(node) :: stack),
        p8.toSeq map { scalaxb.fromXML[gsd.clafer.ir.IElement](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IClafer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.IsAbstract, Some("http://gsd.uwaterloo.ca/clafer"), Some("IsAbstract"), __scope, false),
        __obj.GroupCard map { scalaxb.toXML[gsd.clafer.ir.IGroupCard](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("GroupCard"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Id, Some("http://gsd.uwaterloo.ca/clafer"), Some("Id"), __scope, false),
        scalaxb.toXML[String](__obj.UniqueId, Some("http://gsd.uwaterloo.ca/clafer"), Some("UniqueId"), __scope, false),
        scalaxb.toXML[gsd.clafer.ir.ISuper](__obj.Supers, Some("http://gsd.uwaterloo.ca/clafer"), Some("Supers"), __scope, false),
        __obj.Card map { scalaxb.toXML[gsd.clafer.ir.IInterval](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Card"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[gsd.clafer.ir.IInterval](__obj.GlobalCard, Some("http://gsd.uwaterloo.ca/clafer"), Some("GlobalCard"), __scope, false),
        __obj.Declaration flatMap { scalaxb.toXML[gsd.clafer.ir.IElement](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Declaration"), __scope, false) })

  }

  trait DefaultIrIElementFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IElement] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IElement] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IClafer")) => Right(scalaxb.fromXML[gsd.clafer.ir.IClafer](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IConstraint")) => Right(scalaxb.fromXML[gsd.clafer.ir.IConstraint](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.IElement, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.IClafer => scalaxb.toXML[gsd.clafer.ir.IClafer](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IConstraint => scalaxb.toXML[gsd.clafer.ir.IConstraint](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrIConstraintFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IConstraint] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IConstraint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IConstraint] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IsHard")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "ParentExp")) ^^
      { case p1 ~ p2 =>
      gsd.clafer.ir.IConstraint(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[gsd.clafer.ir.IParentExp](p2, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IConstraint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.IsHard, Some("http://gsd.uwaterloo.ca/clafer"), Some("IsHard"), __scope, false),
        scalaxb.toXML[gsd.clafer.ir.IParentExp](__obj.ParentExp, Some("http://gsd.uwaterloo.ca/clafer"), Some("ParentExp"), __scope, false))

  }

  trait DefaultIrISuperFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.ISuper] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("ISuper")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.ISuper] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IsOverlapping")) ~ 
      rep(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Super")) ^^
      { case p1 ~ p2 =>
      gsd.clafer.ir.ISuper(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[gsd.clafer.ir.IParentExp](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ISuper, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.IsOverlapping, Some("http://gsd.uwaterloo.ca/clafer"), Some("IsOverlapping"), __scope, false),
        __obj.Super flatMap { scalaxb.toXML[gsd.clafer.ir.IParentExp](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Super"), __scope, false) })

  }

  trait DefaultIrIGroupCardFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IGroupCard] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IGroupCard")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IGroupCard] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IsKeyword")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Interval")) ^^
      { case p1 ~ p2 =>
      gsd.clafer.ir.IGroupCard(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[gsd.clafer.ir.IInterval](p2, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IGroupCard, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.IsKeyword, Some("http://gsd.uwaterloo.ca/clafer"), Some("IsKeyword"), __scope, false),
        scalaxb.toXML[gsd.clafer.ir.IInterval](__obj.Interval, Some("http://gsd.uwaterloo.ca/clafer"), Some("Interval"), __scope, false))

  }

  trait DefaultIrMinFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.Min] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.Min] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IntLiteral")) ^^
      { case p1 =>
      gsd.clafer.ir.Min(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.Min, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[BigInt](__obj.IntLiteral, Some("http://gsd.uwaterloo.ca/clafer"), Some("IntLiteral"), __scope, false))

  }

  trait DefaultIrIIntervalFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IInterval] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IInterval")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IInterval] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Min")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Max")) ^^
      { case p1 ~ p2 =>
      gsd.clafer.ir.IInterval(scalaxb.fromXML[gsd.clafer.ir.Min](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[gsd.clafer.ir.ExInteger](p2, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IInterval, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[gsd.clafer.ir.Min](__obj.Min, Some("http://gsd.uwaterloo.ca/clafer"), Some("Min"), __scope, false),
        scalaxb.toXML[gsd.clafer.ir.ExInteger](__obj.Max, Some("http://gsd.uwaterloo.ca/clafer"), Some("Max"), __scope, false))

  }

  trait DefaultIrIParentExpFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IParentExp] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IParentExp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IParentExp] =
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "ParentId")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Exp")) ^^
      { case p1 ~ p2 ~ p3 =>
      gsd.clafer.ir.IParentExp(p1.headOption map { scalaxb.fromXML[gsd.clafer.ir.IType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[gsd.clafer.ir.IExp](p3, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IParentExp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[gsd.clafer.ir.IType](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.ParentId map { scalaxb.toXML[String](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("ParentId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[gsd.clafer.ir.IExp](__obj.Exp, Some("http://gsd.uwaterloo.ca/clafer"), Some("Exp"), __scope, false))

  }

  trait DefaultIrExIntegerFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ExInteger] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ExInteger] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ExIntegerAst")) => Right(scalaxb.fromXML[gsd.clafer.ir.ExIntegerAst](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ExIntegerNum")) => Right(scalaxb.fromXML[gsd.clafer.ir.ExIntegerNum](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.ExInteger, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.ExIntegerAst => scalaxb.toXML[gsd.clafer.ir.ExIntegerAst](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ExIntegerNum => scalaxb.toXML[gsd.clafer.ir.ExIntegerNum](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrExIntegerAstFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ExIntegerAst] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ExIntegerAst] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ExIntegerAst] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ExIntegerAst())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ExIntegerAst, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrExIntegerNumFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.ExIntegerNum] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("ExIntegerNum")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.ExIntegerNum] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IntLiteral")) ^^
      { case p1 =>
      gsd.clafer.ir.ExIntegerNum(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ExIntegerNum, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[BigInt](__obj.IntLiteral, Some("http://gsd.uwaterloo.ca/clafer"), Some("IntLiteral"), __scope, false))

  }

  trait DefaultIrIExpFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IExp] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IExp] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IDeclarationParentExp")) => Right(scalaxb.fromXML[gsd.clafer.ir.IDeclarationParentExp](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IFunctionExp")) => Right(scalaxb.fromXML[gsd.clafer.ir.IFunctionExp](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IIntExp")) => Right(scalaxb.fromXML[gsd.clafer.ir.IIntExp](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IDoubleExp")) => Right(scalaxb.fromXML[gsd.clafer.ir.IDoubleExp](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IStringExp")) => Right(scalaxb.fromXML[gsd.clafer.ir.IStringExp](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IClaferId")) => Right(scalaxb.fromXML[gsd.clafer.ir.IClaferId](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.IExp, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.IDeclarationParentExp => scalaxb.toXML[gsd.clafer.ir.IDeclarationParentExp](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IFunctionExp => scalaxb.toXML[gsd.clafer.ir.IFunctionExp](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IIntExp => scalaxb.toXML[gsd.clafer.ir.IIntExp](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IDoubleExp => scalaxb.toXML[gsd.clafer.ir.IDoubleExp](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IStringExp => scalaxb.toXML[gsd.clafer.ir.IStringExp](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IClaferId => scalaxb.toXML[gsd.clafer.ir.IClaferId](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrIDeclarationParentExpFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IDeclarationParentExp] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IDeclarationParentExp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IDeclarationParentExp] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Quantifier")) ~ 
      rep(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Declaration")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "BodyParentExp")) ^^
      { case p1 ~ p2 ~ p3 =>
      gsd.clafer.ir.IDeclarationParentExp(scalaxb.fromXML[gsd.clafer.ir.IQuantifier](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[gsd.clafer.ir.IDeclaration](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[gsd.clafer.ir.IParentExp](p3, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IDeclarationParentExp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[gsd.clafer.ir.IQuantifier](__obj.Quantifier, Some("http://gsd.uwaterloo.ca/clafer"), Some("Quantifier"), __scope, false),
        __obj.Declaration flatMap { scalaxb.toXML[gsd.clafer.ir.IDeclaration](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Declaration"), __scope, false) },
        scalaxb.toXML[gsd.clafer.ir.IParentExp](__obj.BodyParentExp, Some("http://gsd.uwaterloo.ca/clafer"), Some("BodyParentExp"), __scope, false))

  }

  trait DefaultIrIFunctionExpFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IFunctionExp] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IFunctionExp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IFunctionExp] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Operation")) ~ 
      rep(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Argument")) ^^
      { case p1 ~ p2 =>
      gsd.clafer.ir.IFunctionExp(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[gsd.clafer.ir.IParentExp](_, scalaxb.ElemName(node) :: stack) }) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IFunctionExp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Operation, Some("http://gsd.uwaterloo.ca/clafer"), Some("Operation"), __scope, false),
        __obj.Argument flatMap { scalaxb.toXML[gsd.clafer.ir.IParentExp](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("Argument"), __scope, false) })

  }

  trait DefaultIrIIntExpFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IIntExp] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IIntExp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IIntExp] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IntLiteral")) ^^
      { case p1 =>
      gsd.clafer.ir.IIntExp(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IIntExp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[BigInt](__obj.IntLiteral, Some("http://gsd.uwaterloo.ca/clafer"), Some("IntLiteral"), __scope, false))

  }

  trait DefaultIrIDoubleExpFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IDoubleExp] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IDoubleExp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IDoubleExp] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "DoubleLiteral")) ^^
      { case p1 =>
      gsd.clafer.ir.IDoubleExp(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IDoubleExp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Double](__obj.DoubleLiteral, Some("http://gsd.uwaterloo.ca/clafer"), Some("DoubleLiteral"), __scope, false))

  }

  trait DefaultIrIStringExpFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IStringExp] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IStringExp")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IStringExp] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "StringLiteral")) ^^
      { case p1 =>
      gsd.clafer.ir.IStringExp(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IStringExp, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.StringLiteral, Some("http://gsd.uwaterloo.ca/clafer"), Some("StringLiteral"), __scope, false))

  }

  trait DefaultIrIClaferIdFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IClaferId] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IClaferId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IClaferId] =
      opt(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "ModuleName")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IsTop")) ^^
      { case p1 ~ p2 ~ p3 =>
      gsd.clafer.ir.IClaferId(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IClaferId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ModuleName map { scalaxb.toXML[String](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("ModuleName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Id, Some("http://gsd.uwaterloo.ca/clafer"), Some("Id"), __scope, false),
        scalaxb.toXML[Boolean](__obj.IsTop, Some("http://gsd.uwaterloo.ca/clafer"), Some("IsTop"), __scope, false))

  }

  trait DefaultIrIDeclarationFormat extends scalaxb.ElemNameParser[gsd.clafer.ir.IDeclaration] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    override def typeName: Option[String] = Some("IDeclaration")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[gsd.clafer.ir.IDeclaration] =
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "IsDisjunct")) ~ 
      rep(scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "LocalDeclaration")) ~ 
      (scalaxb.ElemName(Some("http://gsd.uwaterloo.ca/clafer"), "Body")) ^^
      { case p1 ~ p2 ~ p3 =>
      gsd.clafer.ir.IDeclaration(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[gsd.clafer.ir.IParentExp](p3, scalaxb.ElemName(node) :: stack)) }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IDeclaration, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.IsDisjunct, Some("http://gsd.uwaterloo.ca/clafer"), Some("IsDisjunct"), __scope, false),
        __obj.LocalDeclaration flatMap { scalaxb.toXML[String](_, Some("http://gsd.uwaterloo.ca/clafer"), Some("LocalDeclaration"), __scope, false) },
        scalaxb.toXML[gsd.clafer.ir.IParentExp](__obj.Body, Some("http://gsd.uwaterloo.ca/clafer"), Some("Body"), __scope, false))

  }

  trait DefaultIrIQuantifierFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IQuantifier] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IQuantifier] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("INo")) => Right(scalaxb.fromXML[gsd.clafer.ir.INo](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ILone")) => Right(scalaxb.fromXML[gsd.clafer.ir.ILone](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IOne")) => Right(scalaxb.fromXML[gsd.clafer.ir.IOne](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("ISome")) => Right(scalaxb.fromXML[gsd.clafer.ir.ISome](node, stack))
          case (Some("http://gsd.uwaterloo.ca/clafer"), Some("IAll")) => Right(scalaxb.fromXML[gsd.clafer.ir.IAll](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: gsd.clafer.ir.IQuantifier, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: gsd.clafer.ir.INo => scalaxb.toXML[gsd.clafer.ir.INo](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ILone => scalaxb.toXML[gsd.clafer.ir.ILone](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IOne => scalaxb.toXML[gsd.clafer.ir.IOne](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.ISome => scalaxb.toXML[gsd.clafer.ir.ISome](x, __namespace, __elementLabel, __scope, true)
      case x: gsd.clafer.ir.IAll => scalaxb.toXML[gsd.clafer.ir.IAll](x, __namespace, __elementLabel, __scope, true)
      case _ => error("Unknown type: " + __obj)
    }
  }

  trait DefaultIrINoFormat extends scalaxb.XMLFormat[gsd.clafer.ir.INo] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.INo] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.INo] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.INo())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.INo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrILoneFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ILone] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ILone] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ILone] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ILone())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ILone, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrIOneFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IOne] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.IOne] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IOne] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.IOne())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IOne, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrISomeFormat extends scalaxb.XMLFormat[gsd.clafer.ir.ISome] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.ISome] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.ISome] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.ISome())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.ISome, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultIrIAllFormat extends scalaxb.XMLFormat[gsd.clafer.ir.IAll] with scalaxb.CanWriteChildNodes[gsd.clafer.ir.IAll] {
    val targetNamespace: Option[String] = Some("http://gsd.uwaterloo.ca/clafer")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, gsd.clafer.ir.IAll] = seq match {
      case node: scala.xml.Node => Right(gsd.clafer.ir.IAll())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: gsd.clafer.ir.IAll, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

